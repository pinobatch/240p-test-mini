;
; Help and menu engine for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"

def WALL_TILE EQU $80
def ARROW_SPRITE_TILE EQU $80
def WINDOW_TL_TILE EQU $82
def WINDOW_LEFT_TILE EQU $85
def WINDOW_BL_TILE EQU $83
def WINDOW_HLINE_TILE EQU $84
def WHITE_TILE EQU $8A
def WALLBOTTOM_TILE EQU $8B
def FLOORTOP_TILE EQU $90
def FLOOR_TILE EQU $91
def WALL_HEIGHT EQU 12  ; Height of back wall including bottom border
def WINDOW_WIDTH EQU 14  ; Width of window in tiles not including left border
def WXBASE equ 167 - ((WINDOW_WIDTH + 1) * 8)
def CHARACTER_Y EQU 4
def CHARACTER_OBJ_COUNT EQU 16
def HELP_CURSOR_Y_BASE EQU 24
def MENU_INDENT_WIDTH EQU 6

; Character constants
def LF EQU 10

section "help_line_buffer", WRAM0, align[4]
help_line_buffer:: ds 32

section "help_vars",WRAM0
wnd_x: ds 1
wnd_progress: ds 1
help_allowed_keys: ds 1
help_cur_doc: ds 1

help_show_cursor: ds 1
help_height: ds 1
help_blink_timer: ds 1


; Keep cursor_y and help_wanted_page consecutive for save/restore of
; main, sound test, and color tests.  Keep the rest consecutive for
; help_init.
help_init_zerofill_start:
help_flashing_accepted:: ds 1
help_cursor_y:: ds 1
help_wanted_page:: ds 1
help_bg_loaded:: ds 1
help_font_loaded:: ds 1
help_init_zerofill_end:
help_cur_page: ds 1


section "help_map0",ROM0
helpattrmap_gbc:
  db $21,$23,$23,$03,$03,$01
  db $21,$23,$23,$03,$03,$01
  db $21,$24,$24,$04,$04,$01
  db $21,$24,$24,$04,$04,$01
  db $25,$25,$25,$05,$05,$05
  db $25,$25,$25,$05,$05,$05
  db $25,$25,$25,$05,$05,$05
  db $26,$25,$25,$05,$05,$06
  db $27,$24,$25,$05,$04,$07
  db $27,$27,$26,$06,$07,$07
  db $22,$27,$27,$07,$07,$02
  db $22,$22,$22,$02,$02,$02

helpbgpalette_gbc::
  ; Palette 0: Window
  drgb $99FF99
  drgb $776600
  drgb $FFFFFF
  drgb $000000
  ; Palette 1: Back wall
  drgb $99FF99
  drgb $000000
  drgb $335533
  drgb $66AA66
  ; Palette 2: Floor
  drgb $776600
  drgb $000000
  drgb $282000
  drgb $504000
  ; Palette 3: Gus's cap in front of wall
  drgb $99FF99
  drgb $000000
  drgb $222280
  drgb $4444FF
  ; Palette 4: Gus's skin in front of wall
  drgb $99FF99
  drgb $000000
  drgb $aa8877
  drgb $ffbbaa
  ; Palette 5: Gus's shirt in front of wall
  drgb $99FF99
  drgb $000000
  drgb $AAAA55
  drgb $FFFF99
  ; Palette 6: Gus's skin and shirt
  drgb $FFFF99
  drgb $000000
  drgb $aa8877
  drgb $ffbbaa
  ; Palette 7: Gus's skin in front of floor
  drgb $776600
  drgb $000000
  drgb $aa8877
  drgb $ffbbaa
helpbgpalette_gbc_end:
helpobjpalette_gbc:
  ; Palette 0: Vest and arrow
;  drgb $FF00FF
  drgb $AA5500
  drgb $AA8877
  drgb $000000
  ; Palette 1: Bottom of sack
  drgb $FFFFFF
  drgb $131F7F
  drgb $B2B2B2
  drgb $FFFFFF
helpobjpalette_gbc_end:

updowna_msg:  db GL_UP, GL_DOWN, "A: Go",0
b_exit_msg:   db 82, "B: Exit",0
gb_msg:       db 96, "GB",0
sgb_msg:      db 90, "SGB",0
mgb_msg:      db 82, "pocket",0
sgb2_msg:     db 85, "SGB2",0
gbc_msg:      db 90, "GBC",0
gba_msg:      db 90, "GBA",0
machine_type_names:
  dw gb_msg, sgb_msg, mgb_msg, sgb2_msg, gbc_msg, gba_msg

section "help",ROM0

;;
; Clears several variables belonging to the help system.
help_init::
  xor a
  ld hl, help_init_zerofill_start
  ld c, help_init_zerofill_end-help_init_zerofill_start
  rst memset_tiny
  dec a
  ld [hl],a  ; help_cur_page
  ret

;;
; Reads the controller, and if the Start button was pressed,
; show help screen B and set Z. Otherwise, set NZ so that
; the activity can JP NZ back to its VRAM init.
; @return A: new_keys (or $FF if help was shown);
;   Z: clear if help was shown or set otherwise
read_pad_help_check::
  ; Read the controller
  push bc
  call read_pad
  pop bc

  ; If Start not pressed, return
  ldh a,[new_keys]
  bit PADB_START,a
  ret z

  ; Turn off audio in an activity's help screen
  xor a
  ldh [rNR52],A

  ; Call help
  call helpscreen_abslr
  or a,$FF
  ret

;;
; Displays a health warning about flashing lights.
; @return A=0, ZF true if no consent; A!=0, ZF false if consent
flashing_consent::
  ld a, [help_flashing_accepted]
  or a
  ret nz
  ld b,helpsect_health_warning
  call helpscreen_abslr
  ldh a, [cur_keys]
  and PADF_A|PADF_START
  ld [help_flashing_accepted], a
  ret

activity_about::
  ld b,helpsect_about
  jr helpscreen_abslr

activity_credits::
  ld b,helpsect_144p_test_suite
  fallthrough helpscreen_abslr
helpscreen_abslr::
  ld a,PADF_A|PADF_B|PADF_START|PADF_LEFT|PADF_RIGHT
  fallthrough helpscreen

;;
; Views a help page.
; @param A The keys that the menu responds to
;   Usually includes PADF_LEFT|PADF_RIGHT if the document may have
;   multiple pages.
;   For menu selection, use PADF_UP|PADF_DOWN|PADF_A|PADF_START
;   For going back, use PADF_B.  If going back is not possible,
;   it shows machine type instead.
; @param B Document ID to view
; @return A: Number of page within document;
;   help_cursor_y: cursor position
helpscreen::
  ld [help_allowed_keys],a
  ld a,b
  ld [help_cur_doc],a

  ; If not within this document, move to the first page and move
  ; the cursor (if any) to the top
  call help_get_doc_bounds
  ld a,[help_wanted_page]
  cp a,d
  jr c,.movetofirstpage
  cp a,e
  jr c,.nomovetofirstpage
.movetofirstpage:
  ld a,d
  ld [help_wanted_page],a
  xor a
  ld [help_cursor_y],a
.nomovetofirstpage:

  ; If the help VRAM needs to be reloaded, reload its tiles
  ; from the tiles bank and rebuild its tile map.
  ld a,[help_bg_loaded]
  or a
  jr nz,.bg_already_loaded
    call help_load_bg

    ; Request the wanted page by invalidating the current page
    ld a,$FF
    ld [help_cur_page],a
    ld [help_blink_timer], a

    ; Schedule inward transition
    xor a
    jr .have_initial_wnd_progress
  .bg_already_loaded:
  
    ; If BG CHR and map are loaded, and not changing pages,
    ; don't change the transition.
    ld a,[help_cur_page]
    ld hl, help_wanted_page
    xor [hl]
    jr z,.same_doc

    ; If changing pages while BG CHR and map are loaded,
    ; schedule an out-load-in sequence and hide the cursor
    ; until the new page comes in.
    xor a
    ld [help_show_cursor],a
    ld a,256-(wnd_x_sequence_last-wnd_x_sequence)
  .have_initial_wnd_progress:
  ld [wnd_progress],a
  ld b, 1
  call sgb_set_palette_b
.same_doc:

.loop:
  call read_pad
  ld b,PADF_UP|PADF_DOWN
  call autorepeat

  ; Read keys pressed this frame into B.  Ignore keys not enabled in
  ; help_allowed_keys, and ignore all keys until Huffman predecoding
  ; finishes so that the copyright notice is displayed.
  ; 0: none loaded; 1: font loaded; 2: font and predecodes loaded
  ld a, [help_font_loaded]
  and $FE
  jr z, .no_keys
    ldh a,[new_keys]
    ld hl, help_allowed_keys
    and [hl]
  .no_keys:
  ld b,a

  ; Page to page navigation
  call help_get_doc_bounds
  ld hl, help_wanted_page
  ld a, [hl]
  bit PADB_LEFT,b
  jr z,.not_left
    dec a
  .not_left:
  bit PADB_RIGHT,b
  jr z,.not_right
    inc a
  .not_right:
  cp d
  jr c,.new_page_out_of_range
  cp e
  jr nc,.new_page_out_of_range
    ld [hl],a
  .new_page_out_of_range:

  ; Up and down navigation based on page's line count
  ld a,[help_cursor_y]
  bit PADB_UP,b
  jr z,.not_up
    or a
    jr z,.new_y_out_of_range
    dec a
  .not_up:
  bit PADB_DOWN,b
  jr z,.not_down
    inc a
    ld hl, help_height
    cp [hl]
    jr nc,.new_y_out_of_range
  .not_down:
  ld [help_cursor_y],a
  .new_y_out_of_range:

  ; If an exit key is pressed while the showing page is the
  ; wanted page, stop
  ld hl, help_wanted_page
  ld a,[help_cur_page]
  xor [hl]
  jr nz,.not_on_wanted_page
    ld a,PADF_B|PADF_A|PADF_START
    and b
    jr z,.not_exit
    call help_get_doc_bounds
    ld a,[help_cur_page]
    sub d
    ret

  ; If the showing and wanted pages differ, and a transition
  ; isn't running, start one
  .not_on_wanted_page:
    ld hl,wnd_progress
    ld a,[hl]
    or a
    jr nz, .not_slid_completely_off
      call help_draw_wanted_page
      rst wait_vblank_irq
      jr .not_exit
    .not_slid_completely_off:
    cp 128
    jr nc,.no_start_transition
    cp wnd_x_sequence_last-wnd_x_sequence
    jr c,.no_start_transition
      ld [hl],256-(wnd_x_sequence_last-wnd_x_sequence)
    .no_start_transition:
  .not_exit:

  ; Animate the window
  call help_move_window

  ; Draw sprites
  ld hl, oam_used
  ld [hl], 4*CHARACTER_OBJ_COUNT

  ; Draw arrow if up/down navigation allowed
  ld a,[help_show_cursor]
  or a
  jr z,.nodrawarrow
    ld l, [hl]  ; L = OAM pointer
    ld a,[help_cursor_y]
    add a
    add a
    add a
    add HELP_CURSOR_Y_BASE
    ld [hl+],a
    ld a,[wnd_x]
    add 6+1
    ld [hl+],a
    ld a,ARROW_SPRITE_TILE
    ld [hl+],a
    xor a
    ld [hl+],a
    ld a,l
    ld [oam_used],a
  .nodrawarrow:
  call lcd_clear_oam

  ; Wait for next frame
  rst wait_vblank_run_dma
  ld a,[wnd_x]
  ldh [rWX],a

  ; While still, close Gus's eyes at 8 and open them at 0
  ld hl, help_blink_timer
  dec [hl]
  ld a, [hl]
  jr z, .have_new_blink
  cp 8
  jr nz, .no_blink
  .have_new_blink:
    ; GBC or DMG?
    ld e, a
    ldh a, [hw_capability]
    add a
    jr nc, .blink_not_gbc
      set 4, e  ; Bit 4: GBC; bit 3: closed
    .blink_not_gbc:

    ld d, 0
    ld hl, helpblink_chr
    add hl, de
    ld de, $88C6  ; address within head tile
    ld bc, 8
    call memcpy
  .no_blink:
  jp .loop

; VRAM preparation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
; Loads the background used by the help page.
help_load_bg:
  local hAttr

  ; Load tiles used by menu
  call lcd_off
  ld de,helptiles
  ld b,sizeof_helptiles/16
  ldh a,[hw_capability]
  add a
  jr nc,.notgbc1
    ld de,helptiles_gbc
    ld b,sizeof_helptiles_gbc/16
  .notgbc1:
  ld hl,CHRRAM1
  call pb16_unpack_block

  ; Set default window scroll position
  ld a,167
  ld [wnd_x],a
  ldh [rWX],a
  xor a
  ldh [rWY],a
  ldh [rSCX],a
  ldh [rSCY],a

  ; Clear VWF canvas in pattern table
  ldh a,[hw_capability]
  add a
  sbc a  ; $00 for DMG (colors 0 and 1) or $FF for GBC (2 and 3)
  ld h, high(CHRRAM0)
  call clear_canvas
  ld h, high(CHRRAM2)
  call clear_canvas

  ; Background map: Draw back wall
  ld hl, _SCRN0
  ld a, WALL_TILE
  ld c, 32 * (WALL_HEIGHT - 9)
  rst memset_tiny
  rst memset_tiny
  ld a, WALLBOTTOM_TILE
  ld c, 32
  rst memset_tiny
  ld a, FLOORTOP_TILE
  ld c, 32
  rst memset_tiny
  ld a, FLOOR_TILE
  ld c, 32 * (17 - WALL_HEIGHT)
  rst memset_tiny

  ; Background map: Draw right half of character
  ldxy hl, 3, CHARACTER_Y
  call .righthalfcol8612
  ldxy hl, 4, CHARACTER_Y
  ld a,$88
  call .righthalfcol12
  ldxy hl, 5, CHARACTER_Y + 4
  ld a,$96
  ld c,8/2
  call .righthalfcol

  ; Window map: Divider column at left
  ldxy hl, 0, 0, _SCRN1
  ld [hl],WINDOW_TL_TILE
  ldxy hl, 0, 1, _SCRN1
  ld c,16
  ld a,WINDOW_LEFT_TILE
  call .solidcol
  ld [hl],WINDOW_BL_TILE

  ; Window map: Overscroll bounce margin
  ldxy hl, WINDOW_WIDTH+1, 0, _SCRN1
  ld c,18
  call .whitecol  ; guarantees C=0

  ; Window map: Draw text area
  ld b, c  ; B: row number; start at row 0
  .textrowloop:
    ; Destination address is
    ; (_SCRN1 / 32 + row + (row>=1) + (row>=15)) * 32 + 1
    ld a,b
    cp 15    ; C = A<15
    sbc $FF  ; A += 1 - C
    cp 1
    sbc $FF
    add low(_SCRN1/32)
    ld l,a
    ld h,high(_SCRN1/32)
    add hl,hl
    add hl,hl
    add hl,hl
    add hl,hl
    add hl,hl
    inc l

    ; Tile number is (row << 4) & 0x70
    ld a,b
    swap a
    and $70
    ld c,WINDOW_WIDTH
    call memset_inc

    inc b
    ld a,16
    cp b
    jr nz,.textrowloop

  ; Mark the background as having been loaded and cleared
  xor a
  ld [help_height],a
  inc a
  ld [help_bg_loaded],a

  ; Window map: Draw top and bottom horizontal bars
  ld a,WINDOW_HLINE_TILE
  ldxy hl, 1, 1, _SCRN1
  ld c,WINDOW_WIDTH
  rst memset_tiny
  ldxy hl, 1, 16, _SCRN1
  ld c,WINDOW_WIDTH
  rst memset_tiny

  ; Things to draw only on GB/SGB or only on GBC
  ldh a,[hw_capability]
  add a
  jr nc,.notgbcfinal
    call .load_gbc_only
    jr .donegbcfinal
  .notgbcfinal:

    ; Things to load only on mono system
    ; Background map: Cut out area for left half of character
    ; so that it can be drawn with flipped tiles
    ldxy hl, 0, CHARACTER_Y+4
    ld c,8
    call .whitecol
    ldxy hl, 1, CHARACTER_Y
    ld c,12
    call .solidcol
    ldxy hl, 2, CHARACTER_Y
    ld c,12
    call .solidcol

    ; Load static sprites
    ld a,OAMF_XFLIP
    ldh [.hAttr],a
    ld hl,SOAM
    ld bc,($86*256) + 12/2
    ld de,(CHARACTER_Y*8+16)*256+16+8
    call .objcol
    ld bc,($88*256) + 12/2
    ld de,(CHARACTER_Y*8+16)*256+8+8
    call .objcol
    ld bc,($96*256) + 8/2
    ld de,(CHARACTER_Y*8+16+32)*256+0+8
    call .objcol
    ld a,l
    ld [oam_used],a

    ; Load palette
    ld a,%01101100
    call set_bgp
    call set_obp0
  .donegbcfinal:
  call lcd_clear_oam
  call run_dma

  ld a,LCDCF_ON|BG_CHR01|OBJ_8X16|BG_NT0|WINDOW_NT1
  ldh [rLCDC],a
  ldh [vblank_lcdc_value],a
  ld a,LCDCF_ON|BG_CHR21|OBJ_8X16|BG_NT0|WINDOW_NT1
  ldh [stat_lcdc_value],a
  ld a,72
  ldh [rLYC],a  ; split between $8000 and $9000 at this line
  ld a,STATF_LYC
  ldh [rSTAT],a
  ld a,IEF_VBLANK|IEF_LCDC
  ldh [rIE],a  ; enable rSTAT IRQ
  ret

.load_gbc_only:
  ; Fill BG attribute with back wall palette number
  ld a,1
  ldh [rVBK],a

  ld de,_SCRN0
  ld bc,32*WALL_HEIGHT
  ld h,a  ; back wall palette 1
  call memset
  ld bc,32*(32 - WALL_HEIGHT)
  ld h,2  ; floor palette
  call memset
  ; DE = _SCRN1 by now

  ; Fill window attribute
  ld b, 4
  ld h, e  ; attribute 0
  call memset

  ; Draw palette and flipping for character
  ldxy de, 0, CHARACTER_Y
  ld bc,6*256+12
  ld hl,helpattrmap_gbc
  call load_nam

  ; Return to plane 0
  xor a
  ldh [rVBK],a

  ; Background map: Draw left half of character
  ldxy hl, 2, CHARACTER_Y
  call .righthalfcol8612
  ldxy hl, 1, CHARACTER_Y
  ld a,$88
  call .righthalfcol12
  ldxy hl, 0, CHARACTER_Y+4
  ld a,$96
  ld c,8/2
  call .righthalfcol

  ; Draw sprite overlay
  ld hl,SOAM
  
  ; Vest left half
  ld a,OAMF_XFLIP|OAMF_PRI|0
  ldh [.hAttr],a
  ld bc,($AA*256) + 6/2
  ld de,(CHARACTER_Y*8+40)*256+16+8
  call .objcol
  ld bc,($AC*256) + 6/2
  ld de,(CHARACTER_Y*8+40)*256+8+8
  call .objcol

  ; Vest right half
  ld a,OAMF_PRI|0
  ldh [.hAttr],a
  ld bc,($AA*256) + 6/2
  ld de,(CHARACTER_Y*8+40)*256+24+8
  call .objcol
  ld bc,($AC*256) + 6/2
  ld de,(CHARACTER_Y*8+40)*256+32+8
  call .objcol

  ; Bottom
  ld d, h
  ld e, l
  ld hl, gbc_bottom_oam
  call memcpy_pascal16
  ld a,e
  ld [oam_used],a

  ; Load palette
  ld hl,helpbgpalette_gbc
  ld bc,(helpobjpalette_gbc-helpbgpalette_gbc) * 256 + low(rBCPS)
  ld a,$80
  call set_gbc_palette
  ld bc,(helpobjpalette_gbc_end-helpobjpalette_gbc) * 256 + low(rOCPS)
  ld a,$82
  jp set_gbc_palette

.whitecol:
  ld a,WHITE_TILE
.solidcol:
  ld de,32
  .objcutoutcol_loop:
    ld [hl],a
    add hl,de
    dec c
    jr nz,.objcutoutcol_loop
  ret

.righthalfcol8612:
  ld a, $86
.righthalfcol12:
  ld c, 12/2
.righthalfcol:
  ld de,32
  .righthalfcol_loop:
    ld [hl],a
    add hl,de
    inc a
    ld [hl],a
    add hl,de
    add a,5
    dec c
    jr nz,.righthalfcol_loop
  ret

.objcol:
  ld a,d  ; Y coordinate
  ld [hl+],a
  add 16
  ld d,a
  ld a,e  ; X coordinate
  ld [hl+],a
  ld a,b  ; tile number
  ld [hl+],a
  add 6
  ld b,a
  ldh a,[.hAttr]
  ld [hl+],a
  dec c
  jr nz,.objcol
  ret

gbc_bottom_oam:
  dw gbc_bottom_oam_end-gbc_bottom_oam-2
  db CHARACTER_Y*8+90
  db 8+8
  db $AE
  db OAMF_PRI|OAMF_XFLIP|1
  db CHARACTER_Y*8+90
  db 16+8
  db $B4
  db OAMF_PRI|OAMF_XFLIP|1
  db CHARACTER_Y*8+90
  db 24+8
  db $B4
  db OAMF_PRI|1
  db CHARACTER_Y*8+90
  db 32+8
  db $AE
  db OAMF_PRI|1
gbc_bottom_oam_end:

;;
; Clear 2048 bytes of VWF canvas to plane1 = 0, plane1 = A
; @param H starting address high bits
clear_canvas:
  ld bc,-1024
  ld l, c
  .loop:
    ld [hl],0
    inc hl
    ld [hl+],a
    inc c
    jr nz,.loop
    inc b
    jr nz,.loop
  ret

; Window movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

help_move_window:
  ; Decide when it's fully offscreen whether to hide or show
  ; the cursor
  ld hl,wnd_progress
  ld a,[hl]
  or a
  jr nz,.not_cursor_check
    ; If this doc should show a cursor, show it
    ld a,[help_allowed_keys]
    and PADF_DOWN
    ld [help_show_cursor],a
    ld a,[hl]
  .not_cursor_check:

  ; Is a transition in progress?
  cp wnd_x_sequence_peak-wnd_x_sequence
  jr nz,.not_peak_transition
    ; This transition is at its "peak", and its retraction to the
    ; locked position can be shortcut if a transition is needed
    ld a,[help_wanted_page]
    ld b,a
    ld a,[help_cur_page]
    xor b
    jr z,.not_peak_transition
    ld [hl],256-(wnd_x_sequence_peak-wnd_x_sequence)
  .not_peak_transition:

  ld a,[hl]
  cp 128
  jr nc,.is_leaving
  cp wnd_x_sequence_last-wnd_x_sequence + 1
  jr c,.is_entering

  ; If the transition is finished, check for Huffman preloading
  ld hl, help_font_loaded
  ld a, [hl]
  cp 2
  jr nc, .already_preloaded
    ld [hl], 2
    call allhuffdata_predecode
    call help_draw_status_line
  .already_preloaded:
  ld a, WXBASE
  jr .have_wnd_x

  .is_leaving:
    cpl
  .is_entering:
  cp wnd_x_sequence_last-wnd_x_sequence
  jr c,.notfin
    ld a,wnd_x_sequence_last-wnd_x_sequence
  .notfin:

  ; Clock the sequence forward one step
  inc [hl]

  ; Look up wnd_x_sequence[a]
  add low(wnd_x_sequence)
  ld l, a
  adc high(wnd_x_sequence)
  sub l
  ld h, a
  ld a,[hl]
.have_wnd_x:
  ld [wnd_x],a
  ret

; Make sure not to include 166 (only 1 pixel showing) in this
; sequence, as the mono GB has bugs showing it
wnd_x_sequence:
  db 167
;  db WXBASE+120
  db WXBASE+108
  db WXBASE+88
  db WXBASE+70
  db WXBASE+54
  db WXBASE+40
  db WXBASE+28
  db WXBASE+18
  db WXBASE+10
  db WXBASE+4
  db WXBASE+0
  db WXBASE-2
  db WXBASE-3
  db WXBASE-4
wnd_x_sequence_peak:
  db WXBASE-4
  db WXBASE-3
  db WXBASE-1
wnd_x_sequence_last:
  db WXBASE+0

; Help text drawing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The NES version uses a state machine that loads one line per frame.
; This is needed because the NES PPU has no hblank (mode 0); instead,
; it proceeds directly from one mode 3 to the next.  In addition, its
; vblank is long enough to upload both OAM and an entire line of text
; (128 bytes at roughly 9 cycles per byte), unlike the Game Boy whose
; vblank is only 10 lines.  Thus the Game Boy version draws each line
; and uploads it over the next 14 hblanks.

help_draw_wanted_page:
  ; Draw the document's title
  call ensure_vwfInit
  call vwfClearBuf
  ld a,[help_cur_doc]
  call undte_helptitle_a
  ld hl,help_line_buffer
  ld b,$00  ; X position
  call vwfPuts
  ld hl,CHRRAM0+$000
  ld c,WINDOW_WIDTH
  call vwfPutBufHBlank

  ; Look up the address of the start of this page's text
  ld a,[help_wanted_page]
  ld [help_cur_page],a
  ld de,helppages
  call de_index_a
  fallthrough help_draw_multiline

;;
; Draws the page
help_draw_multiline:
; HL: text pointer
; B: line number (1-14)
  ld b, 1
.lineloop:
  push bc
  push hl
  call vwfClearBuf  ; Clear the buffer
  pop hl
  ld a, [hl]
  cp $0F
  jr nz, .not_helptitle_line
    ; $0F $xx: Decompress title $xx
    inc hl
    ld a, [hl+]
    push hl
    call undte_helptitle_a
    jr .have_text_line
  .not_helptitle_line:
    ; Decompress a line of text that occurs once
    call undte_to_help_line_buffer
    push hl
  .have_text_line:
  ; HL still on the stack

  ; Draw the line of text to the buffer
  ld a,[help_allowed_keys]
  and PADF_DOWN
  jr z,.not_menu_indent
    ld a,MENU_INDENT_WIDTH
  .not_menu_indent:
  ld b,a
  ld hl,help_line_buffer
  call vwfPuts
  pop hl
  pop bc
  dec hl
  ; HL: pointer to last character, B: line n

  ; Now draw the tile buffer to the screen
  push bc
  push hl
  call help_putlineb
  pop hl
  pop bc

  ; If at a NUL terminator, stop.  At any other control
  ; character, continue to next line
  ld a,[hl+]
  or a
  jr z,.textdone

  ; Try again in case the last line was a helptitles line
  ld a,[hl]
  or a
  jr z,.textdone

  ; If not below the screen, continue
  inc b
  ld a,b
  cp 15
  jr c,.lineloop
  dec b
.textdone:

  ; B is the height of this page.  Move the cursor up if needed.
  ld a,[help_cursor_y]
  cp b
  jr c,.no_move_help_cursor
  ld a,b
  dec a
  ld [help_cursor_y],a
.no_move_help_cursor:

  ; Save help height for up/down functions and clearing trailing
  ; lines
  ld a,[help_height]
  ld c,a
  ld a,b
  ld [help_height],a

  ; Clear lines used by the previous page but not this one
  ; C = height of last page; B = height of this page
  push bc
  call vwfClearBuf
  pop bc
  jr .erase_trailing_check
.erase_trailing:
  inc b
  push bc
  call help_putlineb
  pop bc
.erase_trailing_check:
  ld a,b
  cp c
  jr c,.erase_trailing

  ; Until the Huffman objects are decompressed, the buttons are
  ; unresponsive, so don't draw B: Exit
  ld a, [help_font_loaded]
  cp 2
  ret c
  fallthrough help_draw_status_line

help_draw_status_line:
  ; If at least 2 pages, draw page count
  call help_get_doc_bounds
  ld a,e
  sub d
  cp 2
  jr c,.fewer_than_two_pages
    ld hl,help_line_buffer
    ld a,GL_LEFT
    ld [hl+],a
    ld a,[help_cur_page]
    sub d
    add '1'
    ld [hl+],a
    ld a, '/'
    ld [hl+],a
    ld a,e
    sub d
    add '0'
    ld [hl+],a
    ld a,GL_RIGHT
    ld [hl+],a
    ld [hl],0
    ld b,0
    ld hl,help_line_buffer
    call vwfPuts
  .fewer_than_two_pages:

  ; If Down arrow enabled, draw Up/Down/A controls
  ld a,[help_allowed_keys]
  bit PADB_DOWN,a
  jr z,.no_updowna
    ld hl,updowna_msg
    ld b,36
    call vwfPuts
  .no_updowna:

  ; If B button enabled, draw Up/Down/A controls.
  ; Otherwise draw machine_type string.
  ld hl,b_exit_msg
  ld a,[help_allowed_keys]
  bit PADB_B,a
  jr nz,.have_type_hl
  
  ; Display machine type
  ldh a, [hw_capability]
  cp $80
  jr nc, .identify_color
    ; $00: DMG/MGB; $01: SGB/SGB2
    ld hl, initial_a  ; bit 7 true if DMG or MGB
    bit 7, [hl]
    jr nz, .type_id_add_2
    jr .have_type_id
  .identify_color:
    ; $80: GBC; $C0: GBA
    rlca
    rlca
  .type_id_add_2:
    add 2
  .have_type_id:
    ld de, machine_type_names
    call de_index_a
  .have_type_hl:
  ld a,[hl+]
  ld b,a
  call vwfPuts

  ld b,15
  fallthrough help_putlineb

help_putlineb:
  ; Calculate destination address:
  ; $8000, $8100, ..., $8700, $9000, $9100, ...
  ld a,b
  add high(CHRRAM1)    ; $88, $89, ..., $8F, $90, $91, ...
  and high(CHRRAM2)|7  ; $80, $81, ..., $87, $90, $91, ...
  ld h,a
  ld l,0
  ld c,14  ; tile count
  jp vwfPutBufHBlank

; Navigation of page ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "help_get_doc_bounds",ROM0

;;
; Gets the current document's page range.
; @param help_cur_doc which document
; @return D: first page of this document;
;   E: first page after those of this document
help_get_doc_bounds:
  ld a,[help_cur_doc]
  fallthrough help_doc_a_bounds
help_doc_a_bounds:
  ld hl,help_cumul_pages
  ld e,a
  ld d,0
  add hl,de
  ld a,[hl+]
  ld e,[hl]
  ld d,a
  ret

section "help_de_index_a",ROM0

;;
; Reads element A of an array of unsigned short *.
; @param A the index
; @param DE pointer to the array, unchanged
; @return HL the value at [DE+A*2]; A=L
de_index_a::
  ld l,a
  ld h,0
  add hl,hl
  add hl,de
  ld a,[hl+]
  ld h,[hl]
  ld l,a
  ret



; Experimental ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This is untested code to be used for saving space later on when I
; need to read down, up, left, and right actions from a lookup table.
  if 0
section "help_table_lead0",ROM0

;;
; Jumps to an entry in the following table indexed by
; the number of leading zeroes in A.
;   call table_lead0_pc
;   dw routine_80orhigher
;   dw routine_40orhigher
;   dw routine_20orhigher
; N.B.: Though it's a call, it acts like a jp in that the
; execution does not resume after the end of the table
table_lead0_pc:
  pop hl
  fallthrough table_lead0_hl

;;
; Jumps to an entry in the following table indexed by
; the number of leading zeroes in A.
;   ld hl, tablestart
;   jp table_lead0_hl
; tablestart:
;   dw routine_80orhigher
;   dw routine_40orhigher
;   dw routine_20orhigher
table_lead0_hl:
  scf  ; call the ninth routine if A was 0
  .loop:
    adc a
    jr c, .found
    inc hl
    inc hl
    jr z, .loop
  ld a, [hl+]
  ld h, [hl]
  ld l, a
  jp hl

  endc
