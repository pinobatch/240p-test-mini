;
; Megaton: Manual lag test for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"


def MAX_TESTS equ 10
def CHECKBOXTILE equ $02
def OFFONTILE equ $80
def CENTERPOS equ 128
def LEFTWALL equ 128-36
def RIGHTWALL equ 128+36
def DIGITSPACE_TILE equ $E0

  rsset hTestState
def framecounts   rb 9
def lastrawlag    rb 1  ; in signed magnitude (7 set: early); overlaps framecounts

def num_tests     rb 1
def cursor_y      rb 1
def reticledir    rb 1  ; 1: horizontal; 2: vertical; 3: both
def enableflags   rb 1
def reticlepos    rb 1
def reticletarget rb 1

def CROSSING_BEEP_FREQ equ 2048-131
def A_PRESS_BEEP_FREQ equ 2048-262

section "megaton",ROM0

; Megaton: Manual lag test
activity_megaton::
  ld hl, num_tests
  xor a
  ld [hl+], a  ; num_tests = 0
  ld [hl+], a  ; cursor_y = 0
  inc a
  ld [hl+], a  ; reticledir = 1
  ld a, 3
  ld [hl], a   ; enableflags = 3

.restart:
  call clear_gbc_attr
  call clear_scrn0_to_0

  ; Clear CHR used for previous lags (tiles $E0-$F3)
  ld de,CHRRAM0+DIGITSPACE_TILE*16
  ld bc,2*16*MAX_TESTS
  call memset

  ; Turn on audio
  call init_apu
  ld a,$80
  ldh [rNR11],a  ; Duty 50%
  ldh [rNR21],a  ; Duty 50%
  ld a,LOW(CROSSING_BEEP_FREQ)
  ldh [rNR13],a  ; Frequency
  ld a,LOW(A_PRESS_BEEP_FREQ)
  ldh [rNR23],a  ; Frequency

  ; Load background tiles
  ld de,megatontiles_chr
  ld b,sizeof_megaton_tiles/16
  call pb16_unpack_to_CHRRAM0
  ld de,CHRRAM1>>4
  ld hl,megaton_labels
  call vwfDrawLabels

  ; Draw stationary reticle with its top left at (64, 48)
  ldxy hl, 8, 6
  ld a,$04
  call draw_still_reticle_piece
  ld a,$05
  call draw_still_reticle_piece
  ld a,$0C
  call draw_still_reticle_piece
  ld a,$0D
  call draw_still_reticle_piece

  ; Place initial reticle at a constant position
  ld a,LEFTWALL
  ldh [reticlepos],a
  ld a,RIGHTWALL
  ldh [reticletarget],a

  ; Draw space for digits in tilemap
  ld a,DIGITSPACE_TILE
  ld b,MAX_TESTS
  ldxy hl, 1, 1
  ld de,30
  .digitspaceloop:
    ld [hl+],a
    inc a
    ld [hl+],a
    inc a
    add hl,de
    dec b
    jr nz,.digitspaceloop

  ; Not using grade labels for two reasons:
  ; 1. There's concern that they're misleading
  ; 2. Not enough colors to display

  ; Seed the RNG to nmis*257+256
  ldh a,[nmis]
  ld c,a
  inc a
  ld b,a
  call srand

  ; Turn on rendering
  ld a,$FF
  call set_obp0  ; set sprite palette to all black
  ld a,LCDCF_ON|BG_NT0|BG_CHR01|OBJ_8X16
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a
  call sgb_set_palette_gray

  ; Draw previous results
  ld b,0
  .prevresultloop:
    ldh a,[num_tests]
    cp b
    jr z,.noprevresults
    push bc
    call draw_result_b
    pop bc
    inc b
    jr .prevresultloop
  .noprevresults:

.loop:
  ld b,helpsect_timing_and_reflex_test
  call read_pad_help_check
  jp nz,.restart

  ; Input handling
  ldh a,[new_keys]
  bit PADB_B,a
  ret nz
  call megaton_move_cursor
  ldh a,[new_keys]
  rra
  jr nc,.not_A_press
    call grade_press
    ldh a,[enableflags]
    bit 1,a
    ld a,$F0
    jr nz,.have_A_press_volume
  .not_A_press:
    xor a
  .have_A_press_volume:
  ldh [rNR22],a
  ld a,$80|HIGH(A_PRESS_BEEP_FREQ)
  ldh [rNR24],a

  ; Draw moving sprites
  call move_reticle

  xor a
  ld [oam_used],a
  ldh a,[reticledir]
  rra
  push af
  call c, draw_h_reticle
  pop af
  rra
  call c, draw_v_reticle
  call lcd_clear_oam
  rst wait_vblank_run_dma

  ; Draw checkbox for direction: horizontal
  ldh a,[reticledir]
  rra
  ld b,CHECKBOXTILE>>1
  rl b
  ldxy hl, 9, 15
  ld [hl],b

  ; Draw checkbox for direction: vertical
  rra
  ld a,CHECKBOXTILE>>1
  rla
  ld [_SCRN0+32*15+13],a

  ; Draw checkbox for randomize
  ldh a,[enableflags]
  ldxy hl, 9, 16
  rra
  push af
  call write_carry_boolean
  pop af

  ; Draw checkbox for audio
  ldxy hl, 9, 17
  rra
  call write_carry_boolean

  ; Draw cursor
  ld de,32
  ldxy hl, 1, 15
  ldh a,[cursor_y]
  ld c,a
  inc c
  ld b,3
  .cursorloop:
    xor a
    dec c
    jr nz,.cursoreq
      inc a
    .cursoreq:
    ld [hl],a
    add hl,de
    dec b
    jr nz,.cursorloop

  ; If flashing enabled, and reticles overlap perfectly, flash
  ldh a,[enableflags]
  bit 1,a
  jr z,.not_flash
  ldh a,[reticlepos]
  cp CENTERPOS
  jr nz,.not_flash
    ld a,$FF  ; all black
    ld b,$F0  ; beep
    jr .have_bgp
  .not_flash:
    ld a,%01101100
    ld b,$00  ; silence
  .have_bgp:
  push bc
  call set_bgp
  pop bc
  ld a,b
  ldh [rNR12],a
  ld a,$80|HIGH(CROSSING_BEEP_FREQ)
  ldh [rNR14],a

  ; Once done, continue to activity_megaton_complete
  ldh a,[num_tests]
  cp MAX_TESTS
  jp c,.loop
  fallthrough activity_megaton_complete

activity_megaton_complete:
  ld a,LCDCF_ON|BG_NT0|BG_CHR01
  ldh [vblank_lcdc_value],a

  ; Replace "Press A when reticles align"
  call vwfClearBuf
  ld hl,help_line_buffer
  ld de,avglag_prolog
  call stpcpy

  ; Count the total frames
  xor a
  ldh [rNR52],a  ; turn off audio
  ld bc,MAX_TESTS*$100+low(framecounts)
  .sumloop:
    ld d,a
    ldh a, [c]
    add d
    inc c
    dec b
    jr nz,.sumloop

  call bcd8bit_baa ; B: tens of frames; A: ones and hundredths
  ld c, a
  ld a, b
  and $03
  jr z,.no_tens
    or '0'
    ld [hl+],a
  .no_tens:
  ld a, c
  swap a
  call putnibble
  ld a, '.'
  ld [hl+],a
  ld a,c
  call putnibble

  ld de,avglag_epilog
  call stpcpy
  xor a
  ld [hl],a

  ld hl,help_line_buffer
  ld b,a
  call vwfPuts

  ; Blank the area below the average
  rst wait_vblank_irq
  xor a
  ldxy hl, 0, 15
  ld c,32*2+20
  rst memset_tiny
  ldxy hl, 1, 14
  ld a,$80
  ld c,16
  call memset_inc

  ; Now blit the prepared tiles
  ld hl,CHRRAM0+$80*16
  ld c,16
  call vwfPutBufHBlank

.loop:
  call read_pad
  rst wait_vblank_irq
  ld a,%01101100
  call set_bgp
  ldh a,[new_keys]
  and PADF_B|PADF_START
  jr z,.loop
  ret

megaton_move_cursor:
  ; Converting a subroutine called in only one place to a macro
  ; saves space, provided it has few or no RETs other than at
  ; the subroutine's end.  Its size changes as follows:
  ;
  ;   -3 bytes for the CALL
  ;   -1 byte for the final RET
  ;   +2 for a conditional CALL changed to a JR
  ;   +1 for each early RET changed to a JR
  ;   +1 for each JR past it changed to a JP for exceeding 127 bytes
  ;   +3 for a fallthrough changed to a JP
  ;
  ; This subroutine's 3 early RETs make it a less than ideal
  ; candidate for inlining.

  ldh a,[new_keys]
  ld b,a

  ; Up/Down: Move cursor
  ldh a,[cursor_y]
  bit PADB_UP,b
  jr z,.not_up
    dec a
  .not_up:
  bit PADB_DOWN,b
  jr z,.not_down
    inc a
  .not_down:
  cp 3
  ret nc
  ldh [cursor_y],a

  ; Left/right: Change setting
  ; Cursor Y already in C
  ld c,2
  bit PADB_LEFT,b
  jr z,.not_decrease_setting
    or a
    jr z,.add_c_to_direction
  .xor_setting_a:
    ld c,a
    ldh a,[enableflags]
    xor c
    ldh [enableflags],a
    ret
  .not_decrease_setting:
  
  bit PADB_RIGHT,b
  ret z
    or a
    jr nz,.xor_setting_a
    dec c
  .add_c_to_direction:
    ldh a,[reticledir]
    add c
    cp 4
    jr c,.not_dir_wrap
      sub 3
    .not_dir_wrap:
    ldh [reticledir],a
    ret

grade_press:
  ; Calculate absolute value of distance
  ldh a,[reticlepos]
  ld b,a
  sub CENTERPOS
  jr nc,.notNeg
    cpl
    inc a
  .notNeg:
  ; Regmap: A: absolute distance; B: actual position of reticle

  ; If the absolute distance is nonzero, and the reticle and its
  ; movement target are on opposite sides of CENTERPOS, the press
  ; was early.
  jr z,.not_early_or_late
    ld d,a
    ldh a,[reticletarget]
    xor b
    and $80
    or d
  .not_early_or_late:

  ; Accept the result unless it was early or way late (>25 frames).
  ; Early is negative ($80-$FF); both early and way late appear
  ; as an unsigned value greater than 25.
  cp 26

  ; Save and draw the result
  ld d, a  ; D = last test result
  ld hl, num_tests
  ld a, [hl]
  jr nc, .test_was_rejected
    inc [hl]
  .test_was_rejected:
  ld b, a  ; A = B = number of tests already accepted
  add low(framecounts)
  ld c, a  ; C = where to write result
  ld a, d
  ldh [c],a
  fallthrough draw_result_b

draw_result_b:
  push bc
  call vwfClearBuf
  pop bc
  push bc

  ; Retrieve the value
  ld a,low(framecounts)
  add b
  ld c,a
  ldh a, [c]

  ; Bit 7: Early
  push af  ; Stack: raw value, which result
  rla
  jr nc,.not_early
    ld a, 'E'
    ld b,0
    call vwfPutTile
  .not_early:
  pop af
  and $7F

  ; Convert to decimal
  call bcd8bit_ac
  jr z,.no_tens
    push bc  ; Stack: ones, index of result
    ld b,6
    or '0'
    call vwfPutTile
    pop bc
  .no_tens:
  ld a,c
  or '0'
  ld b,11
  call vwfPutTile

  ; Blit this tile to VRAM
  pop bc
  ld a,b
  add a
  add DIGITSPACE_TILE
  ld l,a
  ld h,high(CHRRAM0)>>4
  add hl,hl
  add hl,hl
  add hl,hl
  add hl,hl
  ld c,2
  jp vwfPutBufHBlank

move_reticle:
  ldh a,[reticlepos]
  ld b,a
  ldh a,[reticletarget]
  ld c,a
  cp b
  sbc a  ; A: $FF if pos>target or $00 if pos<target
  add a  ; A: $FE if pos>target or $00 if pos<target
  inc a  ; A: $FF if pos>target or $01 if pos<target
  add b
  ldh [reticlepos],a
  ld b,a

  ; If reached goal, turn around
  cp c
  ret nz

  ; Choose a new position to seek
  ld c,RIGHTWALL
  bit 7,b
  jr z,.already_on_right_side
    ld c,LEFTWALL
  .already_on_right_side:
  ldh a,[enableflags]
  rra  ; C=1 if randomize or 0 if not
  ld a, c
  jr nc,.writeback_target

    push bc
    call rand
    pop bc

    ; Map to -8..7 and add to random range
    swap a
    and $0F
    sub 8
    add c
  .writeback_target:
  ldh [reticletarget],a
  ret

draw_still_reticle_piece:
  ld b,4
.loop:
  ld [hl+],a
  add 2
  dec b
  jr nz,.loop
  ld de,28
  add hl,de
  ret

draw_h_reticle:
  ldh a,[reticlepos]
  sub 56
  ldh [draw_spriterect.xpos],a
  ld a,64
  ldh [draw_spriterect.ypos],a
  fallthrough draw_sprite_reticle
draw_sprite_reticle:
  ld a,$04
  ldh [draw_spriterect.tile],a
  xor a
  ldh [draw_spriterect.attr],a
  ld a,2
  ldh [draw_spriterect.height],a
  add a
  ldh [draw_spriterect.width],a
  add a
  ldh [draw_spriterect.tilestride],a
  add a
  ldh [draw_spriterect.rowht],a
  jp draw_spriterect

draw_v_reticle:
  ld a,72
  ldh [draw_spriterect.xpos],a
  ldh a,[reticlepos]
  sub 64
  ldh [draw_spriterect.ypos],a
  jr draw_sprite_reticle

write_carry_boolean:
  ld a,CHECKBOXTILE>>1
  rla
  ld [hl+],a
  xor (OFFONTILE>>1) ^ CHECKBOXTILE
  rla
  ld [hl+],a
  inc a
  ld [hl],a
  ret

megaton_labels:
  ; These two labels must come first because they cause
  ; text to be allocated with off at $80 and on at $82
  db  83,128,"off",10
  db  84,136,"on",10
  db   8,112,"Press A when reticles align",10
  db  20,120,"Direction",10
  db  83,120,GL_LEFT,GL_RIGHT,10
  db 115,120,GL_UP,GL_DOWN,10
  db  20,128,"Randomize",10
  db  20,136,"Audio",0

avglag_prolog:
  db "Average lag: ",0
avglag_epilog:
  db " frames",0
