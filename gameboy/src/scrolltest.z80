;
; Scrolling tests for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"

  rsset hTestState
def curpalette rb 1
def held_keys rb 1
def cur_x rb 2
def cur_y rb 2
def unpaused rb 1
def cur_speed rb 1
def cur_dir rb 1

def KT_SAND0 equ $00
def KT_SAND1 equ $01
def KT_WALLTOP equ $02
def KT_FLOORTILE equ $03
def KT_WALL equ $04
def KT_SHADOW_L equ $05
def KT_SHADOW_U equ $06
def KT_SHADOW_UL equ $07
def KT_SHADOW_U_L equ $08
def KT_SHADOW_UL_U equ $09
def KT_SHADOW_UL_L equ $0A

section "scrolltest_color0",ROM0
hillzone_palette_gbc:
  drgb $FFFFFF  ; Clouds, water
  drgb $8FA1FF
  drgb $D1D8FF
  drgb $342800  ; Unused except for window
  drgb $8FA1FF  ; Mountain peaks and near squares
  drgb $BDAC2C
  drgb $6D5C00
  drgb $342800
  drgb $C5FC00  ; Grass and sky
  drgb $85BC00
  drgb $077704
  drgb $8FA1FF
  drgb $C5FC00  ; Grass and dirt
  drgb $85BC00
  drgb $077704
  drgb $342800
  drgb $FFFFFF  ; Far shore (brown parts)
  drgb $8FA1FF
  drgb $6D5C00
  drgb $342800
  drgb $FFFFFF  ; Far shore (green parts)
  drgb $8FA1FF
  drgb $077704
  drgb $342800
hillzone_palette_gbc_end:

; Values at 0, 16, 56, 112, 120
hillzone_bgp_dmg:  ; Used during Shadow sprite and always on DMG
  db %01010000, %11100100, %11100100, %01100100, %11100100
hillzone_bgp_sgb:  ; Used during Hill zone scroll test on SGB
  db %10111011, %00000110, %00011011, %11000110, %00011011

; I switched to ATTR_LIN because a rectangle of
; 0, 14, 19, 14 doesn't do what I expect
hillzone_sgb_rects:
  db $05*8+2  ; 2 packets hold up to 31 lines
  db 18       ; number of lines

  db $80,$81
  db $82,$83,$84,$85
  db $86,$A7,$A8,$A9
  db $8A,$8B,$8C,$8D
  db $CE,$EF,$F0,$91

  db 0, 0, 0, 0
  db 0, 0, 0, 0
  db 0, 0, 0, 0

; SGB layout for Hill zone scroll test
; 0-15: Clouds
; DMG BGP: 0 0 1 1 %01010000
; SGB: Sky and water, BGP: 3 2 3 2 %10111011
;
; 16-55: Distant mountains
; DMG BGP: 0, 1, 2, 3 %11100100
; SGB: Sky and water, BGP: 2 1 0 0 %00000110
;
; 56-79: Foliage
; DMG BGP: 0, 1, 2, 3 %11100100
; SGB: Far foliage, BGP: 3 2 1 0 %00011011
;
; 80-111: River
; DMG BGP: 0, 1, 2, 3 %11100100
; SGB: Sky and water, BGP: 3 2 1 0 %00011011
;
; 112-119: Top of grass
; DMG BGP: 0, 1, 2, 1 %01100100
; SGB: Top of grass, BGP: 2 1 0 3 %11000110
;
; 120-135: Bottom of grass
; DMG BGP: 0, 1, 2, 3 %11100100
; SGB: Bottom of grass, BGP: 3 2 1 0 %00011011
;
; 136-144: Dirt blocks
; DMG BGP: 0, 1, 2, 3 %11100100
; SGB: Sky and water, BGP: 3 2 1 0 %00011011
;
; SGB palette
; 33: Sky and water (dark brown, medium brown, sky blue, white)
; 34: Far foliage (dark brown, medium green, light green, white)
; 35: Top of grass (dark brown, medium green, light green, sky blue)
; 36: Bottom of grass (dark brown, dark green, medium green, light green)

section "kikimtbelow",ROM0,align[5]
mt_below:
  db KT_SAND0,      KT_SAND0,    KT_WALL,     KT_SAND0
  db KT_SHADOW_U,   KT_SHADOW_UL,KT_SAND0,    KT_SAND0
  db KT_SHADOW_UL_L,KT_SAND0,    KT_SHADOW_UL

; Alternate most common tile below if a wall block is to the left
mt_belowR:
  db KT_SHADOW_L,   KT_SHADOW_L,   KT_WALL,       KT_SAND0
  db KT_SHADOW_U_L, KT_SHADOW_UL_L,KT_SHADOW_L,   KT_SHADOW_L
  db KT_SHADOW_UL_L,KT_SHADOW_L,   KT_SHADOW_UL_L

section "gridscroll_tile",ROM0
gridtile_pb16:
  db %01011111
  db %11111111
  db %10000001
  db %11111101
  db %11111111
section "gridscroll",ROM0
kikibgpalette_gbc:
  drgb $FFFFAA  ; 0: orange (sand)
  drgb $FFAA55
  drgb $AA5500
  drgb $550000
  drgb $FFFF80  ; 1: green (floor tiles)
  drgb $A8FF33
  drgb $408000
  drgb $000000
kikibgpalette_gbc_end:

activity_grid_scroll::
  call init_grid_scroll_vars
  ld a,$03
  ldh [curpalette],a
.restart:
  call clear_gbc_attr
  call sgb_set_palette_gray
  call clear_scrn0_to_0

  ; Load grid tile
  ld hl,CHRRAM2
  ld de,gridtile_pb16
  ld b,1
  call pb16_unpack_block

  ld a,LCDCF_ON|BG_NT0|BG_CHR21
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a
.loop:
  ld b,helpsect_grid_scroll
  call read_pad_help_check
  jr nz,.restart

  ; Process input
  ldh a,[new_keys]
  ld b,a
  ldh a,[held_keys]
  or b
  ldh [held_keys],a
  
  bit PADB_B,b
  ret nz
  call select_inverts_palette

  ; A+Direction: Change direction
  ldh a,[cur_keys]
  bit PADB_A,a
  jr nz,.a_held
    ; If A was pressed and released, toggle pause and clear
    ; held key
    ld hl,held_keys
    bit PADB_A,[hl]
    jr z,.not_release_A
      ldh a,[unpaused]
      cpl
      ldh [unpaused],a
      res PADB_A,[hl]
    .not_release_A:

    ; Change speed in range 1-4
    ld c, 5
    call process_speed_input

    jr .a_done
  .a_held:
    ; Up, Down, Left, Right: Change direction
    ld a,PADF_UP|PADF_DOWN|PADF_LEFT|PADF_RIGHT
    and b
    jr z,.a_done
    ldh [cur_dir],a

    ; Invalidate A hold
    ld hl,held_keys
    res PADB_A,[hl]
  .a_done:

  call move_by_speed
  rst wait_vblank_irq
  ldh a,[curpalette]
  call set_bgp
  ldh a,[cur_y]
  ldh [rSCY],a
  ldh a,[cur_x]
  ldh [rSCX],a
  jr .loop

activity_hillzone_scroll::
  call init_grid_scroll_vars
.restart:
  call load_hillzone_bg

  ld hl, hillzone_sgb_rects
  call sgb_send_if_sgb
  ld bc, $2122
  ld de, $2324
  call sgb_set_palettes_bcde

  ldh a,[vblank_lcdc_value]
  ldh [rLCDC],a
.loop:
  ld b,helpsect_hill_zone_scroll
  call read_pad_help_check
  jr nz,.restart

  call process_1d_input
  rst wait_vblank_irq
  xor a
  ldh [rSCY],a
  ldh a,[cur_x]
  ld l,a
  ldh a,[cur_x+1]
  ld h,a
  ld de, hillzone_bgp_dmg
  ldh a, [hw_capability]
  rra
  jr nc, .not_sgb_bgp_sequence
    ld de, hillzone_bgp_sgb
  .not_sgb_bgp_sequence:
  call set_hillzone_scroll_pos_de

  ldh a,[new_keys]
  bit PADB_B,a
  jr z, .loop
  ret

activity_kiki_scroll::
  call init_grid_scroll_vars
.restart:
  call load_kiki_bg
  ld b, 19
  call sgb_set_palette_b
.loop:
  ld b,helpsect_vertical_scroll
  call read_pad_help_check
  jr nz,.restart

  call process_1d_input
  rst wait_vblank_irq
  xor a
  ldh [rSCX],a
  ldh a,[cur_x+1]
  rra
  ldh a,[cur_x]
  rra
  ldh [rSCY],a

  ldh a,[new_keys]
  bit PADB_B,a
  jr z, .loop
  ret

; Scroll test movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

init_grid_scroll_vars:
  xor a
  ld hl, held_keys
  ; clear held_keys, cur_x (16 bits), cur_y (16 bits)
  ld [hl+], a
  ld [hl+], a
  ld [hl+], a
  ld [hl+], a
  ld [hl+], a
  ; unpaused=$FF, cur_speed=$01, cur_dir=right
  dec a
  ld [hl+], a
  ld a,$01
  ld [hl+], a
  ld a,PADF_RIGHT
  ld [hl],a
  ret

;;
; @param B new keys
; @param C 1 more than maximum speed
process_speed_input:

  ; Change speed in range 1-16
  ldh a,[cur_speed]
  bit PADB_UP,b
  jr z,.not_increase_speed
    inc a
    cp c
    ret nc
  .not_increase_speed:
  bit PADB_DOWN,b
  jr z,.not_decrease_speed
    dec a
    ret z
  .not_decrease_speed:
  ldh [cur_speed],a
  ret

process_1d_input:
  ; Process input
  ldh a,[new_keys]
  ld b,a

  ; Left/Right: Change direction
  ld a,PADF_LEFT|PADF_RIGHT
  and b
  jr z,.no_toggle_dir
    ldh a,[cur_dir]
    xor PADF_LEFT|PADF_RIGHT
    ldh [cur_dir],a
  .no_toggle_dir:

  bit PADB_A,b
  jr z,.no_toggle_pause
    ldh a,[unpaused]
    cpl
    ldh [unpaused],a
  .no_toggle_pause:

  ; Change speed in range 1-16
  ld c, 17
  call process_speed_input
  fallthrough move_by_speed

move_by_speed:
  ldh a,[unpaused]
  and a
  ret z
  ldh a,[cur_speed]
  ld b,a
  ldh a,[cur_dir]

  add a
  jr nc,.not_down
    ldh a,[cur_y]
    add b
    ldh [cur_y],a
    ldh a,[cur_y+1]
    adc 0
    ldh [cur_y+1],a
    ret
  .not_down:

  add a
  jr nc,.not_up
    ldh a,[cur_y]
    sub b
    ldh [cur_y],a
    ldh a,[cur_y+1]
    sbc 0
    ldh [cur_y+1],a
    ret
  .not_up:

  add a
  jr nc,.not_left
    ldh a,[cur_x]
    sub b
    ldh [cur_x],a
    ldh a,[cur_x+1]
    sbc 0
    ldh [cur_x+1],a
    ret
  .not_left:

  add a
  ret nc
    ldh a,[cur_x]
    add b
    ldh [cur_x],a
    ldh a,[cur_x+1]
    adc 0
    ldh [cur_x+1],a
    ret

;;
; Draws the scroll strips for hill zone between 0 and 2048
; 0-15 12.5% speed, 16-111 25% speed, 112-143 100% speed.
; Also changes BGP so that GB and GBC can use one set of tiles.
; @param HL scroll distance
set_hillzone_scroll_pos::
  ld de, hillzone_bgp_dmg
  fallthrough set_hillzone_scroll_pos_de
set_hillzone_scroll_pos_de:
  add hl,hl
  add hl,hl
  add hl,hl
  add hl,hl
  add hl,hl
  ld a,h
  ldh [rSCX],a
  ld a, [de]
  ldh [rBGP],a

  ; uses HALT until IRQ, not
  add hl,hl
  ld b, 16
  di
  call .waitandwrite
  ld b, 56
  call .waitandwrite
  add hl,hl
  add hl,hl
  ld b, 112
  call .waitandwrite
  ld b, 120
  call .waitandwrite
  reti

.waitandwrite:
  ld a,b
  dec a
  ldh [rLYC],a  ; Trigger interrupt at start of next parallax strip
  inc de
  ld a, [de]
  ld c, a
  xor a
  ldh [rIF], a
  halt
.wwloop:
  ldh a,[rLY]
  cp b
  jr nz,.wwloop
  ld a,h
  ldh [rSCX],a
  ld a,c
  ldh [rBGP],a
  ret

; Load scrolling backgrounds ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

load_hillzone_bg::
  call clear_gbc_attr

  ; Load the tilemap
  ld hl,_SCRN0
  ld de,hillzone_nam
  ld b,32*18/16
  call pb16_unpack_block

  ; Load tiles
  ld l, 3
  call allhuffdata_fetch_file_l
  ld hl,CHRRAM1
  call pb16_unpack_block

  ; Set up palette
  ld a,LCDCF_ON|BG_NT0|BG_CHR21
  ldh [vblank_lcdc_value],a
  ldh [stat_lcdc_value],a

  ldh a, [hw_capability]
  add a
  jr nc,.not_gbc_attrs

  ; Set up attribute table
  ld a,1
  ldh [rVBK],a
  ld hl,_SCRN0
  ld de,.attrstrips
.attrloop1:
  ld a,[de]
  inc de
  or a
  jr z,.attrloop1end
  ld c,a
  ld a,[de]
  inc de
  rst memset_tiny
  jr .attrloop1
.attrstrips:
  ; Full horizontal lines (bytecount, attribute value)
  db 32*2,0  ; sky
  db 32*5,1  ; peaks
  db 32*2,3  ; foliage
  db 32*2,4  ; far shore
  db 32*3,0  ; water
  db 32*1,2  ; grass and sky
  db 32*1,3  ; grass and dirt
  db 32*2,1  ; squares
  db 0       ; separator

  ; Horizontal strip patches (address, width, attribute value)
  ; Top of waterfall
  dwxy 16, 7
  db 8,0
  dwxy 16, 8
  db 8,0
  ; Bushes near shore
  dwxy 8, 9
  db 4,3
  dwxy 8, 10
  db 4,5
  dwxy 26, 9
  db 4,3
  dwxy 26, 10
  db 4,5
  ; Near low grass
  dwxy 3, 16
  db 5,3
  dwxy 15,16
  db 3,3
  dwxy 23, 16
  db 7,3
  dw $0000   ; Terminator
.attrloop1end:

  ; Correct areas not matching the rest of the horizontal strip
.attrloop2:
  ld a,[de]
  inc de
  ld l,a
  ld a,[de]
  inc de
  ld h,a
  or l
  jr z,.attrloop2end
  ld a,[de]
  inc de
  ld c,a
  ld a,[de]
  inc de
  rst memset_tiny
  jr .attrloop2
.attrloop2end:

  xor a
  ldh [rVBK],a  ; close attribute plane
  ld hl,hillzone_palette_gbc
  ld bc,(hillzone_palette_gbc_end-hillzone_palette_gbc) * 256 + low(rBCPS)
  ld a,$80
  call set_gbc_palette
.not_gbc_attrs:

  ; Enable rSTAT IRQ on rLY=rLYC but put it on hold
  ld a, $FF
  ldh [rLYC],a  ; disable lyc irq
  ld a,STATF_LYC
  ldh [rSTAT],a
  ld a,IEF_VBLANK|IEF_LCDC
  ldh [rIE],a  ; enable rSTAT IRQ
  ret

; Kiki's tilemap is compressed. Hard.

load_kiki_bg:
  local hWallBits, 3
  local hPathBits, 2
  local hTileToTopLeft, 1

  call clear_gbc_attr

  ; Load tiles
  ld hl,kikitiles_chr
  ld de,CHRRAM2
  call memcpy_pascal16

  ; Decompress packed map into an aligned buffer
  ld de,kikimap
  ld hl,lineImgBuf
  ld b,128/16
  call pb16_unpack_block
  
  ; Clear row history
  ld hl,help_line_buffer
  ld c,20
  ld a,KT_SAND0
  rst memset_tiny

  ; Bad hack: Approximate the right edges of bottom row
  ; for correct wrapping to the top row
  ld a,KT_SHADOW_L
  ld [help_line_buffer+3],a
  ld [help_line_buffer+19],a
  ld a,KT_WALLTOP
  ld [help_line_buffer+2],a
  ld [help_line_buffer+18],a

  ; Bitunpack tiles within the map
  ; using help_line_buffer as a temporary row
  ld hl,lineImgBuf
  ld de,_SCRN0
  ld b,32
  .bitunpack_rowloop:
    ; Load map bits for this row
    ld a,[hl]
    ldh [.hWallBits+0],a
    ld a,l
    add 32
    ld l,a
    ld a,[hl]
    ldh [.hWallBits+1],a
    ld a,l
    add 32
    ld l,a
    ld a,[hl]
    and $F0
    ldh [.hWallBits+2],a
    ld a,[hl]
    and $0F
    ldh [.hPathBits+0],a
    ld a,l
    add 32
    ld l,a
    ld a,[hl]
    ldh [.hPathBits+1],a
    ld a,l
    add -95
    ld l,a
    push hl
    push de

    ; Find most common tile below each tile
    xor a
    ld e,a  ; E: tile to top left
    ld c,20
    ld hl,help_line_buffer
    .mcbelow_loop:
      push bc
      ld d,[hl]

      ; If tile to left is a wall front, read from the alternate table
      cp KT_WALL
      jr nz,.mcb_not_wallfront

        ; Look up the most common tile below this one if a wall is
        ; to the left
        ld bc,mt_belowR
        ld a,d
        add c
        ld c,a
        ld a,[bc]
        jr .mcb_have
      .mcb_not_wallfront:

        ; Look up the most common tile below this one if a wall is
        ; not to the left
        ld bc,mt_below
        ld a,d
        add c
        ld c,a
        ld a,[bc]

        ; If this tile is a shadow below a wall, and there's another
        ; wall to the top left, then there should also be shadow
        ; to the left. So extend the shadow leftward to meet it.
        cp KT_SHADOW_U
        jr nz,.mcb_have
        ld a,e
        cp KT_WALL
        jr nz,.not4to5
          ld a,KT_SHADOW_UL_U
          db $01  ; was jr .mcb_have but is now LD BC, (the next instruction)
        .not4to5:
        ld a,KT_SHADOW_U
      .mcb_have:      
      ld e,[hl]
      ld [hl+],a

      pop bc
      dec c
      jr nz,.mcbelow_loop

    ; Replace tiles with wall tops and path tiles as needed
    ld c,20
    ld hl,help_line_buffer
    pop de
    .wallbits_loop:
      ldh a,[.hWallBits+2]
      add a
      ldh [.hWallBits+2],a
      ldh a,[.hWallBits+1]
      adc a
      ldh [.hWallBits+1],a
      ldh a,[.hWallBits+0]
      adc a
      ldh [.hWallBits+0],a
      jr nc,.no_wall_replace
        ld a,KT_WALLTOP
        ld [hl],a
      .no_wall_replace:

      ldh a,[.hPathBits+1]
      add a
      ldh [.hPathBits+1],a
      ldh a,[.hPathBits+0]
      adc a
      ldh [.hPathBits+0],a
      jr nc,.no_path_replace
        ld a,KT_FLOORTILE
        ld [hl],a
      .no_path_replace:

      ; Write this tile to the tilemap
      ld a,[hl+]
      or a
      jr nz,.tmwrite_notsand
        ld a,b
        xor c
        and 1
      .tmwrite_notsand:
      ld [de],a
      inc de
      dec c
      jr nz,.wallbits_loop

    ; Move to next output row
    ld a,12
    add e
    ld e, a
    adc d
    sub e
    ld d, a

    pop hl
    dec b
    jp nz,.bitunpack_rowloop

  ; Set palette
  ld a,%11100100
  ldh [rBGP],a
  ldh a, [hw_capability]
  add a
  jr nc,.not_gbc

    ld hl,kikibgpalette_gbc
    ld bc,(kikibgpalette_gbc_end-kikibgpalette_gbc) * 256 + low(rBCPS)
    ld a,$80
    call set_gbc_palette

    ; Set tiles 2-4 to use secondary palette
    ld hl,_SCRN0
    ld bc,$0100+low(rVBK)
    .attrloop:
      ld a,[hl]
      sub 2
      cp 3  ; CF=1 if alternate palette else 0
      ld a,0
      rla   ; A=1 if alternate palette else 0
      ld d,a
      ld a,b
      ldh [c],a
      ld a,d
      ld [hl+],a
      xor a
      ldh [c],a
      ld a,h
      cp high(_SCRN1)
      jr c,.attrloop
  .not_gbc:

  ld a,LCDCF_ON|BG_CHR21|BG_NT0
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a
  ret
