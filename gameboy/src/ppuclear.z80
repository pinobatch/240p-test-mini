;
; Basic LCD routines for Game Boy
;
; Copyright 2018 Damian Yerrick
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/gb.inc"
include "src/global.inc"

section "irqvars",HRAM
; Used for bankswitching BG CHR RAM
vblank_lcdc_value:: ds 1
stat_lcdc_value:: ds 1
nmis:: ds 1

; The display list at $CE00-$CE9F gets DMA'd to OAM after every frame
; in which sprites moved.  Also called "shadow OAM".
section "ram_ppuclear",WRAM0,ALIGN[8]
SOAM:: ds 160
oam_used:: ds 1  ; How much of the display list is used

SECTION "vblank_handler", ROM0[$0040]
  push af
  ldh a,[vblank_lcdc_value]
  ldh [rLCDC],a
  jr vblank_tail

SECTION "stat_handler", ROM0[$0048]
  push af
  ldh a,[stat_lcdc_value]
  ldh [rLCDC],a
  pop af
  reti

; Each RST or interrupt handler exceeding 8 bytes ends with a jump
; to the tail.  These tails follow the last used interrupt handler.
; Because of a misbehavior in VisualBoyAdvance's implementation of
; di halt, a handler is considered used if its bit in IE is ever
; turned on, even if it's only on during di.)
vblank_tail:
  ldh a,[nmis]
  inc a
  ldh [nmis],a
  pop af
  reti

; A lot of this file is broken into little tiny sections, one for
; each routine, so that the linker can squeeze them into tiny holes
; between aligned or fixed-address sections

SECTION "lcd_off", ROM0
;;
; Waits for blanking and turns off rendering.
;
; The Game Boy PPU halts entirely when rendering is off.  Stopping
; the signal outside vblank confuses the circuitry in the LCD panel,
; causing it to get stuck on a scanline.  This stuck state is the
; same as the dark horizontal line when you turn off the Game Boy.
;
; Turning rendering on, by contrast, can be done at any time and
; is done by writing the nametable base addresses and sprite size
; to rLCDC with bit 7 set to true.
lcd_off::
  call busy_wait_vblank

  ; Use a RMW instruction to turn off only bit 7
  ld hl, rLCDC
  res 7, [hl]
  ret

SECTION "wait_vblank_irq", ROM0[$10]
;;
; Waits for the vblank ISR to increment the count of vertical blanks.
; Will lock up if DI, vblank IRQ off, or LCD off.
; Clobbers A, HL
wait_vblank_irq::
  ld hl,nmis
  ld a,[hl]
  jr wait_vblank_irq_tail

section "wait_vblank_run_dma", ROM0[$18]
wait_vblank_run_dma::
  rst wait_vblank_irq
  jr run_dma
wait_vblank_irq_tail:
  halt
  cp [hl]
  jr z, wait_vblank_irq_tail
  ret


SECTION "busy_wait_vblank", ROM0

;;
; Waits for forced blank (rLCDC bit 7 clear) or vertical blank
; (rLY >= 144).  Use before VRAM upload or before clearing rLCDC bit 7.
busy_wait_vblank::
  ; If rLCDC bit 7 already clear, we're already in forced blanking
  ldh a,[rLCDC]
  rlca
  ret nc

  ; Otherwise, wait for LY to become 144 through 152.
  ; Most of line 153 is prerender, during which LY reads back as 0.
.wait:
  ldh a, [rLY]
  cp 144
  jr c, .wait
  ret

SECTION "load_gbc_palette", ROM0

;;
; Loads native GBC palette data.
; @param A offset into palette memory (0, 8, 16, ..., 56) plus $80
; @param B number of bytes to copy: 8 times number of subpalettes
; @param C palette port to write: LOW(rBCPS) or LOW(rOCPS)
; @param HL data source
; @return HL at end, C increased by 1, B = 0, DE unchanged
set_gbc_palette::
  ldh [c],a
  inc c
.loop:
  ld a,[hl+]
  ldh [c],a
  dec b
  jr nz,.loop
  ret

SECTION "rom_ppuclear", ROM0

;;
; Moves sprites in the display list from SOAM+[oam_used] through
; SOAM+$9C offscreen by setting their Y coordinate to 0, which is
; completely above the screen top (16).
lcd_clear_oam::
  ; Destination address in shadow OAM
  ld hl, oam_used
  ld a, [hl]
  and $FC
  ld l,a

  ; iteration count
  rrca
  rrca
  add 256 - 40
  ld c,a

  xor a
.rowloop:
  ld [hl+],a
  inc l
  inc l
  inc l
  inc c
  jr nz, .rowloop
  ret

  if 0
;;
; Emulates mono palette feature on Game Boy Color.
; Call this only during blanking.
set_obp1::
  ldh [rOBP1],a
  ld bc,$8800 + low(rOCPS)
  jr set_gbc_mono_palette

  endc

;;
; Emulates mono palette feature on Game Boy Color.
; Call this only during blanking.
set_obp0::
  ldh [rOBP0],a
  ld bc,$8000 + low(rOCPS)
  jr set_gbc_mono_palette

;;
; Emulates mono palette feature on Game Boy Color.
; Call this only during blanking.
set_bgp::
  ldh [rBGP],a
  ld bc,$8000 + low(rBCPS)
  fallthrough set_gbc_mono_palette

;;
; Emulates mono palette setting on Game Boy Color.
; @param A BGP or OBP0 value
; @param B offset into palette memory (0, 8, 16, ..., 56) plus $80
; @param C palette port to write: LOW(rBCPS) or LOW(rOCPS)
; @return AEHL clobbered, B=0, C increased by 1, D unchanged
set_gbc_mono_palette::
  rlca
  ld e,a
  ld a,b  ; Regmap now: E=BGP<<1, A=palette offset, C=address port
  ldh [c],a
  inc c   ; C=data port
  ld b,4  ; color count
  ld h,high(gbmonopalette)
  ld a, e
  ; Regmap now: B=count of remaining colors, C=data port address,
  ;   A=E=BGP value rlc 1, HL=pointer to start of palette
.loop:
    and %00000110
    or low(gbmonopalette)
    ld l,a  ; now L points to this color so stuff it into the palette
    ld a,[hl+]
    ldh [c],a
    ld a,[hl-]
    ldh [c],a
    ld a, e  ; move to next bitfield of BGP
    rrca
    rrca
    ld e, a
    dec b
    jr nz,.loop

  ; Restore BGP value
  rrca
  ret

;;
; Turns off rendering, marks help page as needing to be reloaded,
; and clears the attribute plane of the GBC tilemaps.
; Also disables sets window and LYC to offscreen, resets the VRAM
; bank to 0, and clears scrolling and sprites.
; @return A=0
clear_gbc_attr::
  call lcd_off
  ldh a, [hw_capability]
  add a
  jr nc,.return_0
    ld a, 1
    ldh [rVBK],a
    call clear_scrn0_to_0
    ld b, 4
    call memset  ; clear the second one
  .return_0:

  ld a, $FF
  ldh [rLYC], a  ; Disable LYC IRQ and window
  ldh [rWY], a
  xor a
  ld [help_bg_loaded],a  ; Mark help as unloaded
  ldh [rVBK], a          ; Reset VRAM bank, scrolling, and sprites
  ldh [rSCX], a
  ldh [rSCY], a
  ld [oam_used], a
  ret

load_full_nam::
  ld bc,256*20+18
  fallthrough load_nam

;;
; Copies a B column by C row tilemap from HL to screen at DE.
load_nam::
  push bc
  push de
  .byteloop:
    ld a,[hl+]
    ld [de],a
    inc de
    dec b
    jr nz,.byteloop

  ; Move to next screen row
  pop de
  ld a,32
  add e
  ld e,a
  jr nc,.no_inc_d
    inc d
  .no_inc_d:

  ; Restore width; do more rows remain?
  pop bc
  dec c
  jr nz,load_nam
  ret
